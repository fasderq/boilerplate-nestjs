{"version":3,"file":"application.js","sourceRoot":"","sources":["../src/application.ts"],"names":[],"mappings":";;AAAA,uCAA2C;AAE3C,+DAGkC;AAClC,mCAAgD;AAChD,6DAAyD;AAKzD,wCAAqC;AACrC,wCAA4C;AAC5C,sCAAuC;AAGvC,MAAa,WAAW;IAOV,MAAM,CAAC,KAAK,CAAC,IAAI;QACvB,IAAI,CAAC,QAAQ,EAAE,CAAC;QAEhB,IAAI,CAAC,yBAAyB,CAAC;YAC3B,IAAI,EAAE,IAAI;YACV,MAAM,EAAE,KAAK;SAChB,CAAC,CAAC;QAEH,MAAM,GAAG,GAAG,MAAM,kBAAW,CAAC,MAAM,CAChC,sCAAiB,EACjB,IAAI,iCAAc,EAAE,EACpB,IAAI,CAAC,sBAAsB,CAC9B,CAAC;QAEF,MAAM,MAAM,GAAW,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,eAAM,CAAC,CAAC;QACrD,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAItB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QAEf,MAAM,aAAa,GAAkB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,sBAAa,CAAC,CAAC;QACjE,IAAI,CAAC,kBAAkB,GAAG,aAAa,CAAC,qBAAqB,EAAE,CAAC;QAEhE,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACnC,CAAC;IAES,MAAM,CAAC,QAAQ;QACrB,IAAI,CAAC,GAAG,GAAG,iBAAS,CAAC,UAAU,EAAE,CAAC;QAElC,MAAM,YAAY,GAAG,iBAAS,CAAC,YAAY,EAAE,CAAC;QAC9C,IAAI,CAAC,YAAY,EAAE;YACf,eAAY,EAAE,CAAC;SAClB;IACL,CAAC;IAES,MAAM,CAAC,yBAAyB,CAAC,OAAgC;QACvE,IAAI,OAAO,EAAE;YACT,IAAI,CAAC,sBAAsB,GAAG;gBAC1B,GAAG,IAAI,CAAC,sBAAsB;gBAC9B,GAAG,OAAO;aACb,CAAC;SACL;IACL,CAAC;IAES,MAAM,CAAC,uBAAuB;QACpC,MAAM,EACF,iBAAiB,EAAE,EACf,IAAI,EAAE,cAAc,EACpB,IAAI,EAAE,cAAc,GACvB,EACD,eAAe,EAAE,EACb,IAAI,EAAE,YAAY,EAClB,IAAI,EAAE,YAAY,EAClB,QAAQ,EAAE,gBAAgB,EAC1B,QAAQ,EAAE,gBAAgB,EAC1B,QAAQ,EAAE,YAAY,GACzB,EACJ,GAAG,IAAI,CAAC,kBAAkB,CAAC;QAE5B,IAAI,CAAC,MAAM,CAAC,OAAO,CACf;;gCAEoB,iBAAS,CAAC,UAAU,EAAE;;;8BAGxB,cAAc;8BACd,cAAc;;;8BAGd,YAAY;8BACZ,YAAY;8BACZ,gBAAgB;8BAChB,gBAAgB;8BAChB,YAAY;;aAE7B,EACD,qBAAqB,CACxB,CAAC;IACN,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,GAAG;QACnB,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;QAElB,MAAM,EACF,iBAAiB,EAAE,EACf,IAAI,EAAE,cAAc,EACpB,IAAI,EAAE,cAAc,GACvB,GACJ,GAAG,IAAI,CAAC,kBAAkB,CAAC;QAE5B,MAAM,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;QAE3D,OAAO,IAAI,CAAC;IAChB,CAAC;;AAlGgB,kCAAsB,GAA2B,EAAE,CAAC;AAHzE,kCAsGC","sourcesContent":["import { NestFactory } from '@nestjs/core';\nimport { NestApplicationOptions } from '@nestjs/common/interfaces/nest-application-options.interface';\nimport {\n    FastifyAdapter,\n    NestFastifyApplication,\n} from '@nestjs/platform-fastify';\nimport { config as dotenvConfig } from 'dotenv';\nimport { ApplicationModule } from './application.module';\nimport {\n    ApplicationOptions,\n    ENV,\n} from '@types';\nimport { Logger } from '@app/logger';\nimport { ConfigService } from '@app/config';\nimport { EnvHelper } from '@app/utils';\nimport { INestApplication } from '@nestjs/common';\n\nexport class Application {\n    protected static env: ENV;\n    protected static app: INestApplication;\n    protected static nestApplicationOptions: NestApplicationOptions = {};\n    protected static applicationOptions: ApplicationOptions;\n    protected static logger: Logger;\n\n    protected static async init(): Promise<void> {\n        this.loadEnvs();\n\n        this.setNestApplicationOptions({\n            cors: true,\n            logger: false,\n        });\n\n        const app = await NestFactory.create<NestFastifyApplication>(\n            ApplicationModule,\n            new FastifyAdapter(),\n            this.nestApplicationOptions,\n        );\n\n        const logger: Logger = this.logger = app.get(Logger);\n        app.useLogger(logger);\n\n\n        //! install dependensies before\n        this.app = app;\n\n        const configService: ConfigService = this.app.get(ConfigService);\n        this.applicationOptions = configService.getApplicationOptions();\n\n        this.printApplicationOptions();\n    }\n\n    protected static loadEnvs(): void {\n        this.env = EnvHelper.getNodeEnv();\n\n        const isProduction = EnvHelper.isProduction();\n        if (!isProduction) {\n            dotenvConfig();\n        }\n    }\n\n    protected static setNestApplicationOptions(options?: NestApplicationOptions): void {\n        if (options) {\n            this.nestApplicationOptions = {\n                ...this.nestApplicationOptions,\n                ...options,\n            };\n        }\n    }\n\n    protected static printApplicationOptions(): void {\n        const {\n            httpServerOptions: {\n                host: httpServerHost,\n                port: httpServerPort,\n            },\n            databaseOptions: {\n                host: databaseHost,\n                port: databasePort,\n                username: databaseUsername,\n                password: databasePassword,\n                database: databaseName,\n            }\n        } = this.applicationOptions;\n\n        this.logger.verbose(\n            `\n\n            application mode: ${EnvHelper.getNodeEnv()} (NODE_ENV)\n    \n            http server options:\n                host        ${httpServerHost}\n                port        ${httpServerPort}\n            \n            database options:\n                host        ${databaseHost}\n                port        ${databasePort}\n                username    ${databaseUsername}\n                password    ${databasePassword}\n                database    ${databaseName}\n\n            `,\n            'APPLICATION OPTIONS'\n        );\n    }\n\n    public static async run(): Promise<Application> {\n        await this.init();\n\n        const {\n            httpServerOptions: {\n                port: httpServerPort,\n                host: httpServerHost,\n            },\n        } = this.applicationOptions;\n\n        await this.app.listenAsync(httpServerPort, httpServerHost);\n\n        return this;\n    }\n}\n"]}